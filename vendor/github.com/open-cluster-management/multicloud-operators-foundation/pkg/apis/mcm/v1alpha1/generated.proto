// Licensed Materials - Property of IBM
// (c) Copyright IBM Corporation 2018. All Rights Reserved.
// Note to U.S. Government Users Restricted Rights:
// Use, duplication or disclosure restricted by GSA ADP Schedule
// Contract with IBM Corp.

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.open_cluster_management.multicloud_operators_foundation.pkg.apis.mcm.v1alpha1;

import "k8s.io/api/certificates/v1beta1/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

message ClusterConditionFilter {
  // +optional
  optional string type = 1;

  // +optional
  optional string status = 2;
}

// ClusterJoinRequest is the request from klusterlet to join Manager
message ClusterJoinRequest {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the request to join hcm
  optional ClusterJoinRequestSpec spec = 2;

  // Status defins the join status
  optional ClusterJoinStatus status = 3;
}

// ClusterJoinRequestList is the request list from klusterlet to join manager
message ClusterJoinRequestList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of Cluster objects.
  repeated ClusterJoinRequest items = 2;
}

message ClusterJoinRequestSpec {
  // ClusterName is the name of the cluster
  optional string clusterName = 1;

  // ClusterNamespace is the namespace for cluster
  optional string clusterNamespace = 2;

  // CSR is the csr request spec
  optional k8s.io.api.certificates.v1beta1.CertificateSigningRequestSpec csr = 3;
}

message ClusterJoinStatus {
  // Phase is the pa
  optional string phase = 1;

  // CSRStatus is the status of CSR
  optional k8s.io.api.certificates.v1beta1.CertificateSigningRequestStatus csrStatus = 2;
}

// ClusterRestOptions is the option for pod
message ClusterRestOptions {
  // Path is the URL path to use for the current proxy request to pod.
  // +optional
  optional string path = 1;
}

// ClusterStatus are namespaced and have unique names in the hcm.
message ClusterStatus {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the behavior of the Cluster.
  // +optional
  optional ClusterStatusSpec spec = 2;
}

// ClusterStatusList is a list of all the kubernetes clusters status in the hcm
message ClusterStatusList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of Cluster objects.
  repeated ClusterStatus items = 2;
}

// ClusterStatusSpec is information about the current status of a cluster updated by cluster controller periodically.
message ClusterStatusSpec {
  // MasterIP shows the master IP of managed cluster
  repeated k8s.io.api.core.v1.EndpointAddress masterAddresses = 1;

  // ConcoleURL shows the url of icp console in managed cluster
  optional string consoleURL = 2;

  // Capacity
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> capacity = 3;

  // Usage
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> usage = 4;

  // KlusterletEndpoint shows the endpoint to connect to klusterlet of managed cluster
  optional k8s.io.api.core.v1.EndpointAddress klusterletEndpoint = 5;

  // KlusterletPort shows the port to connect to klusterlet of managed cluster
  optional k8s.io.api.core.v1.EndpointPort klusterletPort = 6;

  // MonitoringScrapeTarget is the scrape target to be used
  optional string monitoringScrapeTarget = 7;

  // Version of Klusterlet
  optional string klusterletVersion = 8;

  // Version of member cluster
  optional string version = 9;

  // KlusterletCA is the ca data for klusterlet to authorize apiserver
  optional bytes klusterletCA = 10;

  // Version of Endpoint
  optional string endpointVersion = 11;

  // Version of Endpoint Operator
  optional string endpointOperatorVersion = 12;
}

// ClusterStatusTopology is the data for toplogy date in a cluster
message ClusterStatusTopology {
  // Name must match the cluster name
  optional string name = 1;

  // Data is the topology data
  // Was previously []byte but changed to string because []byte was being corrupted by the api's Unmarshal code I think - Ethan
  optional string data = 2;
}

// HelmRelease is the helm release info
message HelmRelease {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the behavior of the helm release.
  optional HelmReleaseSpec spec = 2;
}

// HelmReleaseSpec is the details of helm release
message HelmReleaseSpec {
  // ReleaseName
  optional string releaseName = 1;

  // Description
  optional string description = 2;

  // FirstDeployed
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time firstDeployed = 3;

  // LastDeployed
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastDeployed = 4;

  // Manifest
  optional string manifest = 5;

  // ChartName
  optional string chartName = 6;

  // ChartVersion
  optional string chartVersion = 7;

  // Namespace
  optional string namespace = 8;

  // Version
  optional int32 version = 9;

  // Status
  optional string status = 10;
}

// HelmWorkSpec is the helm work details
message HelmWorkSpec {
  // ReleaseName
  optional string releaseName = 1;

  // InSecureSkipVerify skip verification
  optional bool inSecureSkipVerify = 2;

  // ChartName
  optional string chartName = 3;

  // Version
  optional string version = 4;

  // Chart url
  optional string chartURL = 5;

  // Namespace
  optional string namespace = 6;

  // Values
  optional bytes values = 7;

  // ValuesURL url to a file contains value
  optional string valuesURL = 8;
}

// KubeWorkSpec is the kubernetes work details
message KubeWorkSpec {
  // Resource of the object
  optional string resource = 1;

  // Name of the object
  optional string name = 2;

  // Namespace of the object
  optional string namespace = 3;

  // ObjectTemplate is the template of the object
  optional k8s.io.apimachinery.pkg.runtime.RawExtension template = 4;
}

// KubernetesAPIEndpoints represents the endpoints for one and only one
// Kubernetes API server.
message KubernetesAPIEndpoints {
  // ServerEndpoints specifies the address(es) of the Kubernetes API serverâ€™s
  // network identity or identities.
  // +optional
  repeated ServerAddressByClientCIDR serverEndpoints = 1;

  // CABundle contains the certificate authority information.
  // +optional
  optional bytes caBundle = 2;
}

// LeaderVote keeps the leader election status
message LeaderVote {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the leader vote spec.
  // +optional
  optional LeaderVoteSpec spec = 2;

  // Status defines the status of the current leader
  optional LeaderVoteStatus status = 3;
}

// LeaderVoteList is a list of all the leader vote
message LeaderVoteList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of Cluster objects.
  repeated LeaderVote items = 2;
}

// LeaderVoteSpec gives the leader vote spec
message LeaderVoteSpec {
  // Vote is the number that this server vote for leader
  optional int32 vote = 1;

  // KubernetesAPIEndpoints represents the endpoints of the API server for this
  // cluster.
  // +optional
  optional KubernetesAPIEndpoints kubernetesApiEndpoints = 2;

  // Identity is the identity of this server
  optional string identity = 3;
}

// LeaderVoteStatus gives the status of current leader vote result
message LeaderVoteStatus {
  // CurrentLeader shows the current leader identity
  optional string role = 1;

  // ReadyToServer is the flag to show whether this leader is ready to serve
  optional bool readyToServer = 2;

  // LastUpdateTime shows the last leader update time
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdateTime = 3;
}

message PlacementBinding {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Subjects holds references to the objects the role applies to.
  // +optional
  repeated Subject subjects = 2;

  // PlacementPolicyRef references a PlacementPolicy
  optional PlacementPolicyRef placementRef = 3;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message PlacementBindingList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of Cluster objects.
  repeated PlacementBinding items = 2;
}

message PlacementPolicy {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec of Node Template
  optional PlacementPolicySpec spec = 2;

  // keep consistency with fed resource
  optional PlacementPolicyStatus status = 3;
}

message PlacementPolicyDecision {
  optional string clusterName = 1;

  optional string clusterNamespace = 2;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message PlacementPolicyList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of Cluster objects.
  repeated PlacementPolicy items = 2;
}

// PlacementPolicyRef contains information that points to the Placement policy being used
message PlacementPolicyRef {
  // Name of the PlacementPolicy instance
  optional string name = 1;

  // Kind of object being referenced. Values defined by this API group are "Deployable" and "ComplianceResource".
  // +optional
  optional string kind = 2;

  // APIGroup holds the API group of the referenced subject.
  // +optional
  optional string apiGroup = 3;
}

message PlacementPolicySpec {
  // Deprecated since 3.1.2: replaced by ClusterReplicas
  // +optional
  optional int32 replicas = 1;

  // Deprecated since 3.1.2: replaced by resource hint
  // +optional
  optional ResourceHint resourceSelector = 2;

  // Deprecated since 3.1.2: replaced by resource hint
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector clusterSelector = 3;

  // //////////////////////////////////////////////////////////////////////////
  // +optional
  // number of replicas Application wants to
  optional int32 clusterReplicas = 4;

  // +optional
  // Target Clusters
  repeated string clusterNames = 5;

  // +optional
  // Target Cluster is a selector of cluster
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector clusterLabels = 6;

  // +optional
  repeated ClusterConditionFilter clusterConditions = 7;

  // +optional
  // Select Resource
  optional ResourceHint resourceHint = 8;

  // +optional
  // Set ComplianceFilters
  repeated string compliances = 9;
}

message PlacementPolicyStatus {
  repeated PlacementPolicyDecision decisions = 1;
}

// ResourceFilter is the filter of resources
message ResourceFilter {
  // LabelSelect is a selector that selects a set of resources
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector labelSelector = 1;

  // FieldSelector is a selector that select a set of resources
  // +optional
  optional string fieldSelector = 2;

  // APIGroup is the api group of the resources
  optional string apiGroup = 3;

  // ResouceType is the resource type of the subject
  // +optional
  optional string resourceType = 4;

  // Name is the name of the subject
  // +optional
  optional string name = 5;

  // Name is the name of the subject
  // +optional
  optional string namespace = 6;

  // Version is the version of the subject
  // +optional
  optional string version = 7;

  // ServerPrint is the flag to set print on server side
  // +optional
  optional bool serverPrint = 8;

  // Mode is the mode for resource query
  // +optional
  optional string mode = 9;

  // UpdateIntervalSeconds
  // +optional
  optional int32 updateIntervalSeconds = 10;
}

message ResourceHint {
  optional string type = 1;

  optional string order = 2;
}

// ResourceView is the view of resources on a set of cluster
message ResourceView {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the behavior of the work.
  // +optional
  optional ResourceViewSpec spec = 2;

  // Status describes the result of a work
  // +optional
  optional ResourceViewStatus status = 3;
}

// ResourceViewList is a list of all the resource view
message ResourceViewList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of Cluster objects.
  repeated ResourceView items = 2;
}

// ResourceViewResult is the view result of resources on a set of cluster
message ResourceViewResult {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the behavior of the work.
  // +optional
  optional bytes data = 2;
}

// ResourceViewResultList is a list of all the resource view result
message ResourceViewResultList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of Cluster objects.
  repeated ResourceViewResult items = 2;
}

// ResourceViewSpec is the spec for resource view
message ResourceViewSpec {
  // Selector for clusters.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector clusterSelector = 1;

  // Scope describes the filter of the view.
  optional ViewFilter scope = 2;

  // ServerPrint is the flag to set print on server side
  // +optional
  optional bool summaryOnly = 3;

  // Mode is the mode for resource query
  // +optional
  optional string mode = 4;

  // UpdateIntervalSeconds is the inteval to update view
  // +optional
  optional int32 updateIntervalSeconds = 5;
}

// ResourceViewStatus describes the status of view
message ResourceViewStatus {
  repeated ViewCondition conditions = 1;

  // Works point to the related work result on each cluster
  map<string, k8s.io.apimachinery.pkg.runtime.RawExtension> results = 2;
}

// ResultHelmList is the list of helm release in one cluster
message ResultHelmList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items are the items list of helm release
  repeated HelmRelease items = 2;
}

// ServerAddressByClientCIDR helps clients determine the server address that
// they should use, depending on the ClientCIDR that they match.
message ServerAddressByClientCIDR {
  // The CIDR with which clients can match their IP to figure out if they should
  // use the corresponding server address.
  // +optional
  optional string clientCIDR = 1;

  // Address of this server, suitable for a client that matches the above CIDR.
  // This can be a hostname, hostname:port, IP or IP:port.
  // +optional
  optional string serverAddress = 2;
}

// Subject contains a reference to a placed object
message Subject {
  // Kind of object being referenced. Values defined by this API group are "Deployable" and "ComplianceResource".
  optional string kind = 1;

  // APIGroup holds the API group of the referenced subject.
  // +optional
  optional string apiGroup = 2;

  // Name of the object being referenced.
  optional string name = 3;
}

// ViewCondition contains condition information for a view.
message ViewCondition {
  // Type is the type of the cluster condition.
  optional string results = 1;

  // Status is the status of the condition. One of True, False, Unknown.
  optional string status = 2;

  // LastUpdateTime is the last time this condition was updated.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdateTime = 3;

  // Reason is a (brief) reason for the condition's last status change.
  // +optional
  optional string reason = 4;
}

// ViewFilter is the filter of resources
message ViewFilter {
  // LabelSelect is a selector that selects a set of resources
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector labelSelector = 1;

  // FieldSelector is a selector that select a set of resources
  // +optional
  optional string fieldSelector = 2;

  // APIGroup is the group of resources
  // +optional
  optional string apiGroup = 3;

  // ResouceType is the resource type of the subject
  // +optional
  optional string resource = 4;

  // Name is the name of the subject
  // +optional
  optional string resourceName = 5;

  // Name is the name of the subject
  // +optional
  optional string namespace = 6;
}

// Work is the work that will be done on a set of cluster
message Work {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the behavior of the work.
  // +optional
  optional WorkSpec spec = 2;

  // Result describes the result of a work
  // +optional
  optional WorkStatus status = 3;
}

// WorkList is a list of all the works
message WorkList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of Cluster objects.
  repeated Work items = 2;
}

// WorkSet is the work set that will be done on a set of cluster
message WorkSet {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the behavior of the work.
  // +optional
  optional WorkSetSpec spec = 2;

  // Status describes the result of a work
  // +optional
  optional WorkSetStatus status = 3;
}

// WorkSetList is a list of all the work set
message WorkSetList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of Cluster objects.
  repeated WorkSet items = 2;
}

// WorkSetSpec is the spec for workset
message WorkSetSpec {
  // Selector for clusters.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector clusterSelector = 1;

  // Selector for works.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector selector = 2;

  // Template describes the works that will be created.
  optional WorkTemplateSpec template = 3;
}

// WorkSetStatus describes the work set status
message WorkSetStatus {
  // Status of the work set
  optional string status = 1;

  // Reason is the reason of the status
  optional string reason = 2;
}

// WorkSpec defines the work to be processes on a set of clusters
message WorkSpec {
  // Cluster is a selector of cluster
  optional k8s.io.api.core.v1.LocalObjectReference cluster = 1;

  // Type defins the type of the woke to be done
  optional string type = 2;

  // Scope is the scope of the work to be apply to in a cluster
  optional ResourceFilter scope = 3;

  // ActionType is the type of the action
  optional string actionType = 4;

  // HelmWork is the work to process helm operation
  // +optional
  optional HelmWorkSpec helm = 5;

  // KubeWorkSpec is the work to process kubernetes operation
  optional KubeWorkSpec kube = 6;
}

// WorkStatus returns the status of the work
message WorkStatus {
  // Status is the status of the work result
  optional string type = 1;

  // Reason is the reason of the current status
  optional string reason = 2;

  // WorkResult references the related result of the work
  optional k8s.io.apimachinery.pkg.runtime.RawExtension result = 3;

  // LastUpdateTime is the last status update time
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdateTime = 4;
}

// WorkTemplateSpec describes work created from a template
message WorkTemplateSpec {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired behavior of the work.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
  // +optional
  optional WorkSpec spec = 2;
}

